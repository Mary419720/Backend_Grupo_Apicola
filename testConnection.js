// Script simple para probar la conexi√≥n a MongoDB Atlas
require('dotenv').config();
const mongoose = require('mongoose');

console.log('Script de prueba de conexi√≥n a MongoDB Atlas');
console.log(`MONGODB_URI disponible: ${process.env.MONGODB_URI ? 'S√≠ ‚úÖ' : 'NO ‚ùå'}`);

// Registrar eventos de conexi√≥n
mongoose.connection.on('connected', () => {
  console.log('‚úÖ Mongoose conectado exitosamente al cluster.');
});

mongoose.connection.on('error', (err) => {
  console.error(`‚ùå Mongoose error de conexi√≥n:`);
  console.error(err);
});

mongoose.connection.on('disconnected', () => {
  console.log('üîå Mongoose desconectado.');
});

// Funci√≥n para probar la conexi√≥n
async function testConnection() {
  try {
    console.log('Intentando conectar a MongoDB Atlas...');

    // Opciones minimalistas
    const options = {
      serverSelectionTimeoutMS: 10000 // 10 segundos
    };
    
    // Intentar la conexi√≥n
    await mongoose.connect(process.env.MONGODB_URI, options);
    
    // Si llegamos aqu√≠, la conexi√≥n fue exitosa
    console.log('Conexi√≥n establecida correctamente.');
    
    // Crear una colecci√≥n de prueba
    console.log('Intentando realizar una operaci√≥n simple...');
    const testSchema = new mongoose.Schema({ name: String, test: Boolean });
    const TestModel = mongoose.model('TestCollection', testSchema);
    
    // Intentar crear un documento
    const testDoc = new TestModel({ name: 'Test Connection', test: true });
    await testDoc.save();
    console.log('‚úÖ Operaci√≥n exitosa! Documento guardado.');
    
    // Intentar leer documentos
    const count = await TestModel.countDocuments();
    console.log(`Documentos en la colecci√≥n: ${count}`);
    
    // Mantener la conexi√≥n abierta
    console.log('Manteniendo la conexi√≥n abierta por 10 segundos...');
    await new Promise(resolve => setTimeout(resolve, 10000));
    
    // Cerrar la conexi√≥n limpiamente
    await mongoose.disconnect();
    console.log('Conexi√≥n cerrada manualmente.');
    process.exit(0);
  } catch (error) {
    console.error('Error durante la prueba de conexi√≥n:');
    console.error(error);
    process.exit(1);
  }
}

// Ejecutar la prueba
console.log('Iniciando prueba de conexi√≥n...');
testConnection().catch(err => {
  console.error('Error en la funci√≥n principal:');
  console.error(err);
  process.exit(1);
});

// Mantener el proceso vivo
console.log('Script ejecut√°ndose...');
